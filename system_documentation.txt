------------------------------------
--- How To Deploy
------------------------------------


---------------------------------------------------------------------------
--- Setting Up Apache
---------------------------------------------------------------------------


---------------------------------------------------------------------------
--- File Structure
---------------------------------------------------------------------------
			

---------------------------------------------------------------------------
--- Preparing Django
---------------------------------------------------------------------------


---------------------------------------------------------------------------
--- Mod_wsgi and Apache Conf
---------------------------------------------------------------------------

On Ubuntu VM with Apache2

	1. apache conf file, which is found at /etc/apache2/site-available/nelsonlab.conf looks like this:

		<VirtualHost *:80>
		ServerAdmin slin63@illinois.edu
		# Tentative
		ServerName fcpathology.cropsci.illinois.edu

		# Original
		#ServerName euca-128-84-9-141.instances.redcloud.cac.cornell.edu

		Alias /media/ /var/www/FCPprodtest/media/
		Alias /static/ /var/www/FCPprodtest/static/
		Alias /robots.txt /var/www/FCPprodtest/media/robots.txt
		Alias /favicon.ico /var/www/FCPprodtest/media/favicon.ico

		WSGIScriptAlias / /var/www/FCPprodtest/webapp/wsgi.py

		#Doesn't work in Daemon mode, specify in WSGIDaemonProcess instead
		#WSGIPythonPath /var/www/FCPprodtest/:/var/www/FCPprodtest/env/lib/pyt$

		WSGIDaemonProcess fcpathology.cropsci.illinois.edu python-path=var/www/FCPprodtest:/var/www/FCPprodtest/env/lib/python2.7/site-packages
		WSGIProcessGroup fcpathology.cropsci.illinois.edu

		# ALL TAGS ARE CAPS-SENSITIVE!
		<Directory /var/www/FCPprodtest/static>
		Require all granted
		</Directory>

		<Directory /var/www/FCPprodtest/webapp>
		Require all granted
		</Directory>

		<Directory /var/www/FCPprodtest/media>
		Require all granted
		</Directory>

		</VirtualHost>

	2. sudo a2ensite nelsonlab.conf
	3. wsgi file, which is found at /srv/nelsondn/app/conf/apache/django.wsgi looks like this:
		
		import os
		import sys

		# root_path should return /path/to/site_directory
		root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

		# Should lead to site-packages
		sys.path.insert(0, os.path.abspath(os.path.join(root_path, 'env/lib/python2.7/site-packages/')))

		sys.path.insert(0, os.path.abspath(os.path.join(root_path)))
		sys.path.insert(0, os.path.abspath(os.path.join(root_path, 'webapp')))

		os.environ['DJANGO_SETTINGS_MODULE'] = 'webapp.settings'

		from django.core.wsgi import get_wsgi_application
		application = get_wsgi_application()


---------------------------------------------------------------------------
--- Migrating Legacy Database to New Database structure
---------------------------------------------------------------------------

On a local machine:

	1. python populate_new.py
		---populate_new.py uses data/mine_data/ csv files to create new csv files that fit into the new database structure
	2. python manage.py makemigrations
		--- makemigrations tracks any changes made to models.py
	3. python manage.py migrate
		--- migrate creates and applies changes to database tables
	4. python user_loader.py
		--- user_loader.py fills auth_user and lab_userprofile tables
	5. mysql -u root -p -D nelson_db < data_loader.sql
		--- data_loader.sql fills all other lab and legacy tables

---------------------------------------------------------------------------
--- Moving Webapp Project and Data onto VM
---------------------------------------------------------------------------

Method 1 On VM:

	1. git pull app and data
	2. sudo python manage.py makemigrations
	3. sudo python manage.py migrate
	4. mysql -u web_user -p -D db_test < /data/home/nm529/DataDumps/scripts/data_delete.sql
	5. mysql -u web_user -p -D db_test < /data/home/nm529/DataDumps/NelsonDB_Dump/nelson_db.sql

Method 2 On VM (step 5 is slow b/c data_dump.json ~ 300MB):

	1. git pull app and data
	2. sudo python manage.py makemigrations
		--- makemigrations tracks any changes made to models.py
	3. sudo python manage.py migrate
		--- migrate creates and applies changes to database tables
	4. sudo python manage.py loaddata /data/home/nm529/webapp/data_dump.json
		--- loaddata will overwrite all data in the database already
		--- data_dump.json is created using python manage.py datadump > data_dump.json

